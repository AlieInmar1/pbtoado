/**
 * Database module for Supabase interactions
 * Handles inserting and updating data in the database
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Initialize Supabase client
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

/**
 * Log sync activity 
 * Note: This is a simplified replacement for the previous sync history functionality
 * that avoids database dependencies
 * 
 * @param {string} message - Message to log
 * @param {Object} data - Optional data to include in the log
 */
function logSyncActivity(message, data = null) {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}] ${message}`);
  if (data) {
    console.log(JSON.stringify(data, null, 2));
  }
}

/**
 * Clear all data from a Supabase table
 * This is useful to run before populating tables to avoid duplication
 * @param {string} tableName - Table name to clear
 */
async function clearTable(tableName) {
  try {
    logSyncActivity(`Clearing all data from ${tableName}...`);
    const { error } = await supabase
      .from(tableName)
      .delete()
      .neq('id', 'dummy'); // This will delete all records

    if (error) throw error;
    logSyncActivity(`Successfully cleared ${tableName}`);
  } catch (error) {
    console.error(`Error clearing ${tableName}:`, error.message);
    throw error;
  }
}

/**
 * Check if records already exist in the database and track stats
 * @param {Array} items - Items to check
 * @param {string} tableName - Table name to check
 * @param {string} idField - Field containing the ProductBoard ID
 * @param {string} workspaceIdField - Field containing the workspace ID
 * @returns {Object} - Object with existing and new items
 */
async function checkExistingRecords(items, tableName, idField = 'productboard_id', workspaceIdField = 'workspace_id') {
  try {
    // Group items by workspace ID for more efficient querying
    const workspaceGroups = {};
    items.forEach(item => {
      const wsId = item[workspaceIdField] || 'null';
      if (!workspaceGroups[wsId]) {
        workspaceGroups[wsId] = [];
      }
      workspaceGroups[wsId].push(item[idField]);
    });
    
    // Track existing and new items
    const existing = [];
    const pbIdsFound = new Set();
    
    // Query for existing records in each workspace group
    for (const [wsId, pbIds] of Object.entries(workspaceGroups)) {
      const workspaceCondition = wsId === 'null' 
        ? { [workspaceIdField]: null }
        : { [workspaceIdField]: wsId };
        
      const { data, error } = await supabase
        .from(tableName)
        .select('id, ' + idField + ', ' + workspaceIdField)
        .in(idField, pbIds)
        .eq(workspaceIdField, workspaceCondition[workspaceIdField]);
      
      if (error) throw error;
      
      if (data) {
        data.forEach(record => {
          existing.push(record);
          pbIdsFound.add(record[idField] + '|' + (record[workspaceIdField] || 'null'));
        });
      }
    }
    
    // Identify new items
    const newItems = items.filter(item => {
      const lookupKey = item[idField] + '|' + (item[workspaceIdField] || 'null');
      return !pbIdsFound.has(lookupKey);
    });
    
    return { 
      existing,
      new: newItems,
      stats: {
        total: items.length,
        existing: existing.length,
        new: newItems.length
      }
    };
  } catch (error) {
    console.error(`Error checking existing records in ${tableName}:`, error.message);
    throw error;
  }
}

/**
 * Enhanced upsert function with better tracking of operations
 * @param {Array} items - Items to upsert
 * @param {string} tableName - Table to upsert to
 * @param {string} idField - Field name for ProductBoard ID (default: productboard_id)
 * @param {string} workspaceIdField - Field name for workspace ID (default: workspace_id)
 * @returns {Object} - Upsert results with statistics
 */
async function enhancedUpsert(items, tableName, idField = 'productboard_id', workspaceIdField = 'workspace_id') {
  if (!items || items.length === 0) {
    return { data: [], stats: { total: 0, inserted: 0, updated: 0 } };
  }
  
  try {
    logSyncActivity(`Processing ${items.length} items for ${tableName}...`);
    
    // Get existing vs new items
    const check = await checkExistingRecords(items, tableName, idField, workspaceIdField);
    logSyncActivity(`Found ${check.stats.existing} existing and ${check.stats.new} new records in ${tableName}`);
    
    // Track statistics
    const stats = {
      total: items.length,
      inserted: 0,
      updated: 0,
      errors: 0
    };
    
    // Process new items (insert)
    let insertedData = [];
    if (check.new.length > 0) {
      logSyncActivity(`Inserting ${check.new.length} new records into ${tableName}...`);
      const { data, error } = await supabase
        .from(tableName)
        .insert(check.new)
        .select();
      
      if (error) {
        logSyncActivity(`Error inserting records: ${error.message}`, { error });
        stats.errors += check.new.length;
      } else {
        insertedData = data || [];
        stats.inserted = insertedData.length;
        logSyncActivity(`Successfully inserted ${stats.inserted} records into ${tableName}`);
      }
    }
    
    // Process existing items (update)
    let updatedData = [];
    if (check.existing.length > 0) {
      // Map items by their ProductBoard ID and workspace ID for lookup
      const itemMap = {};
      items.forEach(item => {
        const key = item[idField] + '|' + (item[workspaceIdField] || 'null');
        itemMap[key] = item;
      });
      
      // Prepare updates
      const updates = check.existing.map(record => {
        const lookupKey = record[idField] + '|' + (record[workspaceIdField] || 'null');
        const item = itemMap[lookupKey];
        return {
          ...item,
          id: record.id // Include the Supabase ID for updating
        };
      });
      
      logSyncActivity(`Updating ${updates.length} existing records in ${tableName}...`);
      
      // Update in smaller batches to avoid request size limitations
      const batchSize = 100;
      for (let i = 0; i < updates.length; i += batchSize) {
        const batch = updates.slice(i, i + batchSize);
        const { data, error } = await supabase
          .from(tableName)
          .upsert(batch)
          .select();
        
        if (error) {
          logSyncActivity(`Error updating records (batch ${i / batchSize + 1}): ${error.message}`, { error });
          stats.errors += batch.length;
        } else {
          updatedData = [...updatedData, ...(data || [])];
          logSyncActivity(`Updated batch ${i / batchSize + 1} (${batch.length} records)`);
        }
      }
      
      stats.updated = updatedData.length;
      logSyncActivity(`Successfully updated ${stats.updated} records in ${tableName}`);
    }
    
    // Combine data and return
    const allData = [...insertedData, ...updatedData];
    return { data: allData, stats };
  } catch (error) {
    console.error(`Error in enhancedUpsert for ${tableName}:`, error.message);
    throw error;
  }
}

/**
 * Upsert features into the database
 * @param {Array} features - Features to upsert
 * @returns {Object} - Object with upserted features and stats
 */
async function upsertFeatures(features) {
  try {
    const result = await enhancedUpsert(features, 'productboard_features');
    return result;
  } catch (error) {
    console.error('Error upserting features:', error.message);
    throw error;
  }
}

/**
 * Upsert initiatives into the database
 * @param {Array} initiatives - Initiatives to upsert
 * @returns {Object} - Object with upserted initiatives and stats
 */
async function upsertInitiatives(initiatives) {
  try {
    const result = await enhancedUpsert(initiatives, 'productboard_initiatives');
    return result;
  } catch (error) {
    console.error('Error upserting initiatives:', error.message);
    throw error;
  }
}

/**
 * Upsert objectives into the database
 * @param {Array} objectives - Objectives to upsert
 * @returns {Object} - Object with upserted objectives and stats
 */
async function upsertObjectives(objectives) {
  try {
    const result = await enhancedUpsert(objectives, 'productboard_objectives');
    return result;
  } catch (error) {
    console.error('Error upserting objectives:', error.message);
    throw error;
  }
}

/**
 * Batch upsert data in chunks to avoid request size limits
 * @param {Array} items - Items to upsert
 * @param {Function} upsertFn - Function to use for upserting
 * @param {number} chunkSize - Size of each chunk
 * @returns {Object} - Combined results and statistics
 */
async function batchUpsert(items, upsertFn, chunkSize = 100) {
  const results = [];
  const statsArray = [];
  
  // Process in chunks to avoid request size limits
  for (let i = 0; i < items.length; i += chunkSize) {
    const chunk = items.slice(i, i + chunkSize);
    const chunkResult = await upsertFn(chunk);
    
    // If the result has data and stats, track them
    if (chunkResult && chunkResult.data) {
      results.push(...chunkResult.data);
      if (chunkResult.stats) {
        statsArray.push(chunkResult.stats);
      }
    } else {
      // Fallback for old function returns that don't include stats
      results.push(...(chunkResult || []));
    }
    
    // Small delay to avoid overwhelming the database
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  
  return {
    length: results.length,
    data: results,
    statsArray
  };
}

module.exports = {
  logSyncActivity,
  clearTable,
  checkExistingRecords,
  enhancedUpsert,
  upsertFeatures,
  upsertInitiatives,
  upsertObjectives,
  batchUpsert
};
