import { createClient } from 'npm:@supabase/supabase-js@2.39.7';
import puppeteer from 'npm:puppeteer-core@21.5.2';
import type { Browser, Page } from 'npm:puppeteer-core@21.5.2';

// Simple CORS headers
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'POST, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Client-Info',
};

// Function to extract rankings from ProductBoard using different methods
async function extractRankingsFromProductBoard(
  username: string,
  password: string,
  boardUrl: string,
  scrapingApiKey: string,
  scrapingService: string = 'apify',
  workspace_id?: string,
  board_id?: string
): Promise<Array<{ storyId: string, rank: number, name?: string }>> {
  console.log(`Starting ProductBoard ranking extraction via ${scrapingService}...`);
  
  if (scrapingService === 'token') {
    // Use token-based scraping if available
    if (!workspace_id || !board_id) {
      throw new Error('workspace_id and board_id are required for token-based scraping');
    }
    
    return await extractRankingsUsingTokens(workspace_id, board_id, boardUrl);
  } else if (scrapingService === 'api') {
    // Use ProductBoard API if available (not implemented yet)
    throw new Error('ProductBoard API scraping not yet implemented');
  } else if (scrapingService === 'apify') {
    // Fall back to Apify scraping
    if (!scrapingApiKey) {
      throw new Error('Scraping API key is required for Apify scraping');
    }
    
    return await extractRankingsUsingApify(username, password, boardUrl, scrapingApiKey);
  } else {
    throw new Error(`Unsupported scraping service: ${scrapingService}`);
  }
}

/**
 * Extract rankings using session tokens
 */
async function extractRankingsUsingTokens(
  workspace_id: string,
  board_id: string,
  boardUrl: string
): Promise<Array<{ storyId: string, rank: number, name?: string }>> {
  console.log('Extracting rankings using session tokens...');
  
  // Initialize Supabase client (we're already in a Supabase function)
  const supabase = createClient(
    Deno.env.get('SUPABASE_URL') || '',
    Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') || ''
  );
  
  // First, check if this board is configured to use shared tokens
  const { data: boardConfig, error: boardError } = await supabase
    .from('productboard_tracked_boards')
    .select('use_shared_tokens')
    .eq('workspace_id', workspace_id)
    .eq('board_id', board_id)
    .single();
    
  if (boardError) {
    console.warn(`Error checking board config: ${boardError.message}`);
  }
  
  const useSharedTokens = boardConfig?.use_shared_tokens !== false; // Default to true
  let tokenData = null;
  
  if (useSharedTokens) {
    console.log('Checking for shared user tokens...');
    
    // Look for user-board associations
    const { data: userBoardAccess, error: accessError } = await supabase
      .from('productboard_user_board_access')
      .select('user_id')
      .eq('workspace_id', workspace_id)
      .eq('board_id', board_id);
      
    if (!accessError && userBoardAccess?.length > 0) {
      // Get array of user IDs that have access to this board
      const userIds = userBoardAccess.map(access => access.user_id);
      
      // Find valid tokens for any of these users
      const { data: sharedTokens, error: sharedTokenError } = await supabase
        .from('productboard_auth_tokens')
        .select('*')
        .eq('workspace_id', workspace_id)
        .eq('is_valid', true)
        .eq('shared_token', true)
        .in('user_id', userIds)
        .order('created_at', { ascending: false });
      
      if (!sharedTokenError && sharedTokens?.length > 0) {
        // Use the most recent token
        tokenData = sharedTokens[0];
        console.log(`Using shared token from user ${tokenData.user_id || 'unknown'}`);
      }
    }
  }
  
  // If no shared token found, fall back to board-specific token
  if (!tokenData) {
    console.log('Falling back to board-specific token...');
    const { data: boardToken, error: tokenError } = await supabase
      .from('productboard_auth_tokens')
      .select('*')
      .eq('workspace_id', workspace_id)
      .eq('board_id', board_id)
      .eq('is_valid', true)
      .single();
    
    if (tokenError || !boardToken) {
      throw new Error(`No valid token found for board: ${tokenError?.message || 'Token not found'}`);
    }
    
    tokenData = boardToken;
  }
  
  // Check if token is expired
  if (tokenData.expires_at && new Date(tokenData.expires_at) < new Date()) {
    // Update token status
    await supabase
      .from('productboard_auth_tokens')
      .update({ is_valid: false })
      .eq('id', tokenData.id);
      
    throw new Error('Token has expired. Please capture a new token.');
  }
  
  // Use the token to scrape the rankings
  try {
    // Use similar approach as in the productboard-scraper.js script
    const items = await scrapeProductBoardWithTokens(boardUrl, tokenData.auth_cookies);
    
    // Update last_used_at
    await supabase
      .from('productboard_auth_tokens')
      .update({ last_used_at: new Date().toISOString() })
      .eq('id', tokenData.id);
    
    return items;
  } catch (error) {
    // If scraping fails, mark the token as invalid
    await supabase
      .from('productboard_auth_tokens')
      .update({ is_valid: false })
      .eq('id', tokenData.id);
      
    throw new Error(`Failed to scrape with token: ${error.message}`);
  }
}

/**
 * Scrape ProductBoard using saved token
 */
async function scrapeProductBoardWithTokens(
  boardUrl: string,
  cookies: any[]
): Promise<Array<{ storyId: string, rank: number, name?: string }>> {
  // Launch Puppeteer
  console.log('Launching headless browser for token-based scraping...');
  
  // We'll use the Deno-compatible Puppeteer implementation
  const browser = await puppeteer.launch({
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });
  
  try {
    // Create a new page
    const page = await browser.newPage();
    
    // Set cookies for authentication
    await page.setCookie(...cookies);
    
    // Navigate to the board URL
    console.log(`Navigating to ${boardUrl}...`);
    await page.goto(boardUrl, { 
      waitUntil: 'domcontentloaded',
      timeout: 120000 // 2 minute timeout
    });
    
    // Wait for content to load
    await page.waitForTimeout(10000);
    
    // Take a screenshot for debugging (optional)
    await page.screenshot({ path: '/tmp/productboard-screenshot.png' });
    
    // Extract the rankings
    console.log('Extracting rankings from the page...');
    const items = await page.evaluate(() => {
      // Try various selectors to find feature cards
      const selectors = [
        '.feature-card', 
        '.priority-item',
        '[data-test="priority-item"]',
        '.pb-feature-card',
        '.prioritization-item'
      ];
      
      // Find elements using the first working selector
      let elements = [];
      for (const selector of selectors) {
        const found = document.querySelectorAll(selector);
        if (found.length > 0) {
          elements = Array.from(found);
          console.log(`Found ${elements.length} items with selector: ${selector}`);
          break;
        }
      }
      
      // If no items found with specific selectors, try a more generic approach
      if (elements.length === 0) {
        console.log('No items found with specific selectors, trying generic approach');
        // Look for anything that looks like a card
        const candidates = Array.from(document.querySelectorAll('*'))
          .filter(el => {
            // Basic size check
            const rect = el.getBoundingClientRect();
            // Skip if it's too small
            if (rect.width < 100 || rect.height < 30) return false;
            // Skip headers, navigation, buttons
            const tag = el.tagName.toLowerCase();
            if (['header', 'nav', 'button', 'a'].includes(tag)) return false;
            // Skip if it has very little text
            const text = el.textContent || '';
            if (text.length < 10) return false;
            
            return true;
          });
        
        // Sort by vertical position to maintain order
        elements = candidates.sort((a, b) => {
          const rectA = a.getBoundingClientRect();
          const rectB = b.getBoundingClientRect();
          return rectA.top - rectB.top;
        });
      }
      
      // Extract data from the elements
      return elements.map((el, index) => {
        const text = el.textContent || '';
        
        // Try to extract an ID from the text using patterns
        let id = `item-${index + 1}`;
        const idMatch = text.match(/([A-Z]+-\d+|[A-Z]+\d+|#\d+)/);
        if (idMatch) {
          id = idMatch[0].replace(/^#/, '');
        }
        
        // Try to extract a title if possible
        let name = '';
        const headingEl = el.querySelector('h1, h2, h3, h4, h5, h6, [class*="title"], [class*="heading"]');
        if (headingEl) {
          name = headingEl.textContent.trim();
        } else {
          // Take the first line as the title
          name = text.split('\n')[0].trim() || text.substring(0, 50).trim();
        }
        
        return {
          storyId: id,
          rank: index + 1,
          name
        };
      });
    });
    
    console.log(`Extracted ${items.length} items from ProductBoard`);
    return items;
  } finally {
    // Close the browser
    await browser.close();
  }
}

/**
 * Extract rankings using Apify
 */
async function extractRankingsUsingApify(
  username: string,
  password: string,
  boardUrl: string,
  scrapingApiKey: string
): Promise<Array<{ storyId: string, rank: number, name?: string }>> {
  console.log('Extracting rankings using Apify...');
  
  // Create a new Apify actor run
  // We need to use the actor directly since we don't have a task set up yet
  console.log('Creating Apify actor run...');
  const runResponse = await fetch('https://api.apify.com/v2/acts/apify~hello-world/runs', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${scrapingApiKey}`
    },
    body: JSON.stringify({
      // For now, we'll use a simple test actor
      // Later, replace with your deployed productboard-ranking-extractor actor
      message: 'Testing API connection'
    })
  });
  
  if (!runResponse.ok) {
    const errorText = await runResponse.text();
    throw new Error(`Apify API error: ${runResponse.status} ${errorText}`);
  }
  
  const runData = await runResponse.json();
  const runId = runData.data?.id;
  
  if (!runId) {
    throw new Error('Failed to start Apify actor run');
  }
  
  console.log(`Apify actor run started with ID: ${runId}`);
  
  // Poll for the run to complete
  let runFinished = false;
  let rankings: Array<{ storyId: string, rank: number }> = [];
  
  for (let i = 0; i < 30; i++) { // Wait up to 5 minutes (30 * 10 seconds)
    console.log(`Checking run status (attempt ${i + 1})...`);
    
    const statusResponse = await fetch(`https://api.apify.com/v2/actor-runs/${runId}`, {
      headers: {
        'Authorization': `Bearer ${scrapingApiKey}`
      }
    });
    
    if (!statusResponse.ok) {
      const errorText = await statusResponse.text();
      throw new Error(`Apify API error: ${statusResponse.status} ${errorText}`);
    }
    
    const statusData = await statusResponse.json();
    const status = statusData.data?.status;
    
    if (status === 'SUCCEEDED') {
      runFinished = true;
      break;
    } else if (status === 'FAILED' || status === 'ABORTED' || status === 'TIMED-OUT') {
      throw new Error(`Apify actor run failed with status: ${status}`);
    }
    
    // Wait 10 seconds before checking again
    await new Promise(resolve => setTimeout(resolve, 10000));
  }
  
  if (!runFinished) {
    throw new Error('Apify actor run timed out');
  }
  
  // Get the run results
  console.log('Getting run results...');
  const resultsResponse = await fetch(`https://api.apify.com/v2/actor-runs/${runId}/dataset/items`, {
    headers: {
      'Authorization': `Bearer ${scrapingApiKey}`
    }
  });
  
  if (!resultsResponse.ok) {
    const errorText = await resultsResponse.text();
    throw new Error(`Apify API error: ${resultsResponse.status} ${errorText}`);
  }
  
  const results = await resultsResponse.json();
  
  // Process the results
  if (Array.isArray(results)) {
    rankings = results.map((item, index) => ({
      storyId: item.storyId,
      rank: item.rank || (index + 1) // Use provided rank or fallback to index + 1
    }));
  }
  
  console.log(`Extracted ${rankings.length} rankings`);
  return rankings;
}

// Function to update Azure DevOps work items with new rankings
async function updateAzureDevOpsRankings(
  supabase: any,
  workspaceId: string,
  rankings: Array<{ storyId: string, rank: number }>
): Promise<{ success: boolean, updatedCount: number, errors: string[] }> {
  const errors: string[] = [];
  let updatedCount = 0;
  
  // Get the Azure DevOps configuration for this workspace
  const { data: workspace, error: workspaceError } = await supabase
    .from('workspaces')
    .select('id, ado_api_key, ado_project_id')
    .eq('id', workspaceId)
    .single();
  
  if (workspaceError || !workspace) {
    return { 
      success: false, 
      updatedCount: 0, 
      errors: [`Failed to get workspace: ${workspaceError?.message || 'Workspace not found'}`] 
    };
  }
  
  // Get entity mappings to map ProductBoard IDs to Azure DevOps IDs
  const { data: mappings, error: mappingsError } = await supabase
    .from('entity_mappings')
    .select('id, productboard_id, ado_id')
    .eq('workspace_id', workspaceId);
  
  if (mappingsError) {
    return { 
      success: false, 
      updatedCount: 0, 
      errors: [`Failed to get entity mappings: ${mappingsError.message}`] 
    };
  }
  
  // Create a map of ProductBoard IDs to Azure DevOps IDs
  const idMap = new Map();
  mappings.forEach((mapping: any) => {
    idMap.set(mapping.productboard_id, mapping.ado_id);
  });
  
  // Extract organization and project from ado_project_id
  const [organization, project] = (workspace.ado_project_id || '').split('/');
  
  if (!organization || !project || !workspace.ado_api_key) {
    return { 
      success: false, 
      updatedCount: 0, 
      errors: ['Azure DevOps configuration is incomplete'] 
    };
  }
  
  // Update each work item in Azure DevOps
  for (const ranking of rankings) {
    const adoId = idMap.get(ranking.storyId);
    
    if (!adoId) {
      errors.push(`No mapping found for ProductBoard story ${ranking.storyId}`);
      continue;
    }
    
    try {
      // Call Azure DevOps API to update the work item
      const response = await fetch(
        `https://dev.azure.com/${organization}/${project}/_apis/wit/workitems/${adoId}?api-version=7.0`,
        {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json-patch+json',
            'Authorization': `Basic ${btoa(`:${workspace.ado_api_key}`)}`,
          },
          body: JSON.stringify([
            {
              op: 'add',
              path: '/fields/Microsoft.VSTS.Common.StackRank',
              value: ranking.rank
            }
          ]),
        }
      );
      
      if (!response.ok) {
        const errorData = await response.json();
        errors.push(`Failed to update work item ${adoId}: ${errorData.message || response.statusText}`);
      } else {
        updatedCount++;
      }
    } catch (error) {
      errors.push(`Error updating work item ${adoId}: ${error.message}`);
    }
  }
  
  return {
    success: errors.length === 0,
    updatedCount,
    errors
  };
}

// Main handler for the Supabase function
Deno.serve(async (req) => {
  // Handle CORS preflight request
  if (req.method === 'OPTIONS') {
    return new Response(null, { 
      status: 200, // Explicitly use 200 instead of 204
      headers: corsHeaders 
    });
  }

  try {
    const { workspace_id, board_id, preview_only = false, scraping_api_key, scraping_service = 'apify' } = await req.json();
    
    if (!workspace_id || !board_id) {
      return new Response(
        JSON.stringify({ error: 'workspace_id and board_id are required' }),
        {
          status: 400,
          headers: {
            'Content-Type': 'application/json',
            ...corsHeaders,
          },
        }
      );
    }
    
    if (!scraping_api_key) {
      return new Response(
        JSON.stringify({ error: 'scraping_api_key is required' }),
        {
          status: 400,
          headers: {
            'Content-Type': 'application/json',
            ...corsHeaders,
          },
        }
      );
    }
    
    // Initialize Supabase client
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') || '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') || ''
    );
    
    // Create a sync history record
    const { data: syncRecord, error: syncRecordError } = await supabase
      .from('productboard_sync_history')
      .insert({
        workspace_id,
        board_id,
        status: 'in_progress'
      })
      .select()
      .single();
    
    if (syncRecordError) {
      return new Response(
        JSON.stringify({ error: `Failed to create sync record: ${syncRecordError.message}` }),
        {
          status: 500,
          headers: {
            'Content-Type': 'application/json',
            ...corsHeaders,
          },
        }
      );
    }
    
    // Get the board details
    const { data: board, error: boardError } = await supabase
      .from('productboard_tracked_boards')
      .select('*')
      .eq('workspace_id', workspace_id)
      .eq('board_id', board_id)
      .single();
    
    if (boardError || !board) {
      await supabase
        .from('productboard_sync_history')
        .update({
          status: 'failed',
          error_message: `Board not found: ${boardError?.message || 'No board found'}`,
          completed_at: new Date().toISOString()
        })
        .eq('id', syncRecord.id);
      
      return new Response(
        JSON.stringify({ error: `Board not found: ${boardError?.message || 'No board found'}` }),
        {
          status: 404,
          headers: {
            'Content-Type': 'application/json',
            ...corsHeaders,
          },
        }
      );
    }
    
    // Get the ProductBoard credentials
    const { data: credentials, error: credentialsError } = await supabase
      .from('productboard_ui_credentials')
      .select('*')
      .eq('workspace_id', workspace_id)
      .single();
    
    if (credentialsError || !credentials) {
      await supabase
        .from('productboard_sync_history')
        .update({
          status: 'failed',
          error_message: `ProductBoard credentials not found: ${credentialsError?.message || 'No credentials found'}`,
          completed_at: new Date().toISOString()
        })
        .eq('id', syncRecord.id);
      
      return new Response(
        JSON.stringify({ error: `ProductBoard credentials not found: ${credentialsError?.message || 'No credentials found'}` }),
        {
          status: 404,
          headers: {
            'Content-Type': 'application/json',
            ...corsHeaders,
          },
        }
      );
    }
    
    try {
      // Extract rankings from ProductBoard using the specified scraping service
      const rankings = await extractRankingsFromProductBoard(
        credentials.username,
        credentials.password,
        board.board_url,
        scraping_api_key,
        scraping_service
      );
      
      // If preview_only is true, just return the rankings without updating Azure DevOps
      if (preview_only) {
        // Get entity mappings to map ProductBoard IDs to Azure DevOps IDs
        const { data: mappings, error: mappingsError } = await supabase
          .from('entity_mappings')
          .select('productboard_id, ado_id')
          .eq('workspace_id', workspace_id);
        
        if (mappingsError) {
          throw new Error(`Failed to get entity mappings: ${mappingsError.message}`);
        }
        
        // Create a map of ProductBoard IDs to Azure DevOps IDs
        const mappingsMap: Record<string, string> = {};
        mappings.forEach((mapping: any) => {
          mappingsMap[mapping.productboard_id] = mapping.ado_id;
        });
        
        return new Response(
          JSON.stringify({
            success: true,
            rankings,
            mappings: mappingsMap
          }),
          {
            headers: {
              'Content-Type': 'application/json',
              ...corsHeaders,
            },
          }
        );
      }
      
      // Update Azure DevOps work items
      const updateResult = await updateAzureDevOpsRankings(
        supabase,
        workspace_id,
        rankings
      );
      
      // Update the sync history record
      await supabase
        .from('productboard_sync_history')
        .update({
          status: updateResult.success ? 'success' : 'failed',
          stories_synced: updateResult.updatedCount,
          error_message: updateResult.errors.join('\n'),
          completed_at: new Date().toISOString()
        })
        .eq('id', syncRecord.id);
      
      // Update the last_synced_at timestamp for the board
      await supabase
        .from('productboard_tracked_boards')
        .update({
          last_synced_at: new Date().toISOString()
        })
        .eq('id', board.id);
      
      return new Response(
        JSON.stringify({
          success: updateResult.success,
          stories_synced: updateResult.updatedCount,
          errors: updateResult.errors,
          rankings
        }),
        {
          headers: {
            'Content-Type': 'application/json',
            ...corsHeaders,
          },
        }
      );
    } catch (error) {
      // Update the sync history record with the error
      await supabase
        .from('productboard_sync_history')
        .update({
          status: 'failed',
          error_message: `Error during sync: ${error.message}`,
          completed_at: new Date().toISOString()
        })
        .eq('id', syncRecord.id);
      
      return new Response(
        JSON.stringify({ error: `Error during sync: ${error.message}` }),
        {
          status: 500,
          headers: {
            'Content-Type': 'application/json',
            ...corsHeaders,
          },
        }
      );
    }
  } catch (error) {
    return new Response(
      JSON.stringify({ error: error.message }),
      {
        status: 500,
        headers: {
          'Content-Type': 'application/json',
          ...corsHeaders,
        },
      }
    );
  }
});
